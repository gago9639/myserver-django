{"version":3,"sources":["components/Header.module.sass","components/Home.js","components/Login.js","components/Register.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","first_name","window","sessionStorage","getItem","last_name","className","to","Login","useState","username","password","formData","setFormData","redirection","setRedirection","handleInput","event","target","name","value","autoComplete","onSubmit","preventDefault","fetch","credentials","method","body","JSON","stringify","then","res","json","console","log","setItem","alert","styles","form","TextField","label","variant","required","onChange","Button","type","Register","withRouter","logined","Header","location","pathname","onClick","removeItem","onLogout","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9978048c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1-9En\"};","import React from 'react';\r\nimport styles from './Home.module.sass';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function Home(props) {\r\n    const first_name = window.sessionStorage.getItem('first_name');\r\n    const last_name = window.sessionStorage.getItem('last_name');\r\n\r\n    if(!first_name) {\r\n       return <Redirect to='/login'/>\r\n    }\r\n\r\n     return(<div className=\"page\">\r\n         <h1>{first_name + '  ' + last_name}</h1>\r\n     </div>)\r\n }\r\n\r\n export default Home;","import React, { useState } from 'react';\r\nimport styles from './Login.module.sass';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\n function Login(props) {\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: ''});\r\n    const [redirection, setRedirection] = useState(false)\r\n    \r\n    const handleInput = (event) => {\r\n        setFormData({...formData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n       event.preventDefault();\r\n       fetch('/api/login', {\r\n        credentials: 'include',\r\n           method: 'post',\r\n           body: JSON.stringify(formData)\r\n       })\r\n       .then(res => res.json())\r\n       .then(res => {\r\n            console.log(res)\r\n            if(res.first_name) {\r\n                window.sessionStorage.setItem('first_name', res.first_name)\r\n                window.sessionStorage.setItem('last_name', res.last_name)\r\n                setRedirection(true)\r\n            } else {\r\n                alert('invalid password')\r\n            }\r\n       })\r\n    }\r\n\r\n    if(redirection) {\r\n        return (<>\r\n            <Redirect to='/'/>\r\n        </>)\r\n    }\r\n\r\n     return(<div className=\"page\" >\r\n         <form autoComplete=\"off\" onSubmit={handleSubmit} className={styles.form}>\r\n            <h1>Login</h1>\r\n            <div className=\"form-field\">\r\n                <TextField name=\"username\" label=\"Username\" variant=\"outlined\" required value={formData.username} onChange={handleInput}/> \r\n            </div>\r\n            <div className=\"form-field\">\r\n                <TextField name=\"password\" label=\"Password\" variant=\"outlined\" required value={formData.password} onChange={handleInput}/>   \r\n            </div>\r\n            <div className=\"form-field\">\r\n                <Button variant=\"outlined\" type=\"submit\">login</Button>  \r\n            </div>\r\n        </form>\r\n     </div>)\r\n }\r\n\r\n export default Login;","import React, {useState} from 'react';\r\nimport styles from './Register.module.sass';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n function Register(props) {\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: '',\r\n        first_name: '',\r\n        last_name: ''});\r\n    \r\n    const [redirection, setRedirection] = useState(false)\r\n    \r\n    const handleInput = (event) => {\r\n        setFormData({...formData, [event.target.name]: event.target.value});\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n       event.preventDefault();\r\n       fetch('/api/register', {\r\n           method: 'post',\r\n           body: JSON.stringify(formData)\r\n       }).then(res => res.json())\r\n       .then(res => {\r\n          setRedirection(true)\r\n       })\r\n    }\r\n\r\n    if(redirection) {\r\n        return (<>\r\n            <Redirect to='/login'/>\r\n        </>)\r\n    }\r\n\r\n     return(<div className=\"page\" >\r\n         <form autoComplete=\"off\" onSubmit={handleSubmit} className={styles.form}>\r\n            <h1>Registration</h1>\r\n            <div className=\"form-field\">\r\n                <TextField name=\"username\" label=\"Username\" variant=\"outlined\" required value={formData.username} onChange={handleInput}/>\r\n            </div>\r\n            <div className=\"form-field\">\r\n                <TextField className=\"form-field\" name=\"password\" label=\"Password\" variant=\"outlined\" required value={formData.password} onChange={handleInput}/>\r\n            </div>\r\n            <div className=\"form-field\">\r\n                <TextField className=\"form-field\" name=\"first_name\" label=\"First name\" variant=\"outlined\" required value={formData.first_name} onChange={handleInput}/>   \r\n            </div>\r\n            <div className=\"form-field\">\r\n                <TextField className=\"form-field\" name=\"last_name\" label=\"Last name\" variant=\"outlined\" required value={formData.last_name} onChange={handleInput}/>    \r\n            </div>\r\n            <div className=\"form-field\">\r\n                <Button variant=\"outlined\" type=\"submit\">Create account</Button>     \r\n            </div>\r\n            \r\n        </form>\r\n     </div>)\r\n }\r\n\r\n export default Register;","import React, {useState, useEffect} from 'react';\r\nimport styles from './Header.module.sass';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\n\r\n\r\n function Header(props) {\r\n    const[logined, setLogined] = useState(props.logined)\r\n\r\n     return(<div className={styles.Header}>\r\n         {props.location.pathname === '/'\r\n          ? <button className=\"action-button\" onClick={() => {\r\n              window.sessionStorage.removeItem('first_name');\r\n              window.sessionStorage.removeItem('last_name');\r\n              props.onLogout();\r\n         }}>Logout</button>\r\n        :props.location.pathname === '/login'\r\n        ?<Link to=\"/register\"><button className=\"action-button\" >Create account</button></Link>\r\n        :<Link to=\"/login\"><button className=\"action-button\" >Login</button></Link>\r\n       }   \r\n     </div>)\r\n }\r\n\r\n export default withRouter(Header);","import React, {useState, useEffect} from 'react';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Header from './components/Header';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom'\n\nfunction App() {\n  const [redirection, setRedirection] = useState(false);\n  let logined = false;\n\n  if(window.sessionStorage.getItem('first_name')) {\n    logined = true\n  } else {\n    logined = false\n  }\n\n  function isRedirect() {\n    if(redirection) {\n      setRedirection(false);\n      return true\n    }\n    return false\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header onLogout={() => {\n              setRedirection(true)\n         }} logined={logined}/>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/login' component={Login}/>\n          <Route path='/register' component={Register}/>\n        </Switch>\n        {isRedirect() && <Redirect to='/login'/>}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}